// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo User para autenticación
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Campos para autenticación con email/password
  emailVerified  Boolean? @default(false)
  hashedPassword String?

  // Relaciones para OAuth providers
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// Modelo Account para OAuth providers (Google, GitHub, etc.)
model Account {
  id                   String    @id @default(cuid())
  accountId            String    @unique
  userId               String
  type                 String    @default("credential")
  provider             String    @default("credential")
  providerId           String
  password             String?
  refreshToken         String?
  accessToken          String?
  accessTokenExpiresAt DateTime?
  idToken              String?
  tokenType            String?
  scope                String?
  sessionState         String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

// Modelo Session para gestión de sesiones
model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Verification model for email/password flows
model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification_tokens")
}
